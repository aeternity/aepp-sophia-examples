contract CryptoHamster =
   datatype event = NewHamster(indexed int, string, hash)

   record state = { hamsters : map(string, hash), next_id : int }

   stateful entrypoint init() = { hamsters = {}, next_id = 0 }

   entrypoint name_exists(name: string) : bool =
      Map.member(name, state.hamsters)

   stateful entrypoint create_hamster(hamster_name: string) : unit =
      require(!name_exists(hamster_name), "Name is already taken")
      create_hamster_by_name_dna(hamster_name, generate_dna(hamster_name))
   
   entrypoint get_hamster_dna(hamster_name: string) : hash =
      require(name_exists(hamster_name), "Hamster does not exist!")
      state.hamsters[hamster_name]

   stateful function create_hamster_by_name_dna(name: string, dna: hash) : unit =
      put(state{hamsters[name] = dna, next_id = (state.next_id + 1)})
      Chain.event(NewHamster(state.next_id, name, dna))
 
   function generate_dna(name : string) : hash =
      String.sha3(name)